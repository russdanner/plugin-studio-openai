(function () {
  'use strict';

  (function () {
    CrafterCMSNext.React;
    CrafterCMSNext.ReactDOM;
    CrafterCMSNext.components.CrafterCMSNextBridge;
    CrafterCMSNext.components.ConfirmDialog;
    CStudioForms.Controls.TextGen = CStudioForms.Controls.TextGen || function (id, form, owner, properties, constraints) {
      this.owner = owner;
      this.owner.registerField(this);
      this.errors = [];
      this.properties = properties;
      this.constraints = constraints;
      this.inputEl = null;
      this.countEl = null;
      this.required = false;
      this.value = '_not-set';
      this.form = form;
      this.id = id;
      this.supportedPostFixes = ['_s'];
      return this;
    };
    YAHOO.extend(CStudioForms.Controls.TextGen, CStudioForms.CStudioFormField, {
      getLabel: function getLabel() {
        return 'OpenAI Text Generator';
      },
      _renderReactComponent: function _renderReactComponent(obj) {
        var instrumentTimer = setInterval(function () {
          if (typeof $ !== 'function') return;
          var inputEls = $.find('.cstudio-form-control-input');
          if (inputEls) {
            inputEls.forEach(function (element) {
              var parentElement = element.parentNode;
              var buttonEl = document.createElement("button");
              buttonEl.innerHTML = "Help Me Write";
              buttonEl.style = "background: rgb(44, 109, 178); border: none; color: white; text-align: center; border-radius: 20px; margin: 5px;";
              buttonEl.parentEl = element;
              buttonEl.onclick = function () {
                var _this = this;
                var subject = prompt("Tell me about the subject");
                var api = window.location.protocol + "//" + window.location.host + "/api/plugins/org/rd/plugin/openai/openai/gentext.json?" + "subject=" + subject + "&fieldName=Title";
                fetch(api, {
                  method: 'GET'
                }).then(function (response) {
                  return response.json();
                }).then(function (result) {
                  var text = result[0].text;
                  text = text.replaceAll('"', "");
                  _this.parentEl.value = text;
                });
              };
              parentElement.appendChild(buttonEl);
            });
          }
          clearInterval(instrumentTimer);
        }, 3000);
      },
      render: function render(config, containerEl) {
        containerEl.id = this.id;
        this._renderReactComponent(this);
      },
      getValue: function getValue() {
        return this.value;
      },
      setValue: function setValue(value) {
        this.value = value;
      },
      getName: function getName() {
        return 'textgen';
      },
      getSupportedProperties: function getSupportedProperties() {
        return [];
      },
      getSupportedConstraints: function getSupportedConstraints() {
        return [];
      },
      getSupportedPostFixes: function getSupportedPostFixes() {
        return this.supportedPostFixes;
      }
    });
    CStudioAuthoring.Module.moduleLoaded('textgen', CStudioForms.Controls.TextGen);
  })();

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
